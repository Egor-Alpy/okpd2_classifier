from anthropic import AsyncAnthropic
from typing import List, Dict, Any
import logging
import re

logger = logging.getLogger(__name__)


class AnthropicClient:
    def __init__(self, api_key: str, model: str):
        self.client = AsyncAnthropic(api_key=api_key)
        self.model = model

    async def classify_batch(self, prompt: str, max_tokens: int = 4000) -> str:
        """Отправить запрос на классификацию"""
        try:
            response = await self.client.messages.create(
                model=self.model,
                max_tokens=max_tokens,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.0
            )

            return response.content[0].text

        except Exception as e:
            logger.error(f"Error calling Anthropic API: {e}")
            raise


class PromptBuilder:
    """Построитель промптов для классификации"""

    @staticmethod
    def build_stage_one_prompt(products: List[str]) -> str:
        """Построить промпт для первого этапа"""
        products_text = "\n".join(products)

        prompt = f"""ЗАДАЧА: Определить ВСЕ ВОЗМОЖНЫЕ основные классы ОКПД2 для каждого товара (первые 2 цифры кода).

ИНСТРУКЦИИ:
1. Для каждого товара определите ВСЕ подходящие классы (XX)
2. Если товар может относиться к НЕСКОЛЬКИМ классам - укажите ВСЕ через символ "|"
3. Возвращайте в формате: "Название товара|XX" или "Название товара|XX|YY|ZZ"
4. Если товар НЕ подходит НИ ПОД ОДИН класс - НЕ выводите его
5. НЕ добавляйте пояснения или комментарии
6. Лучше указать больше потенциальных классов, чем пропустить подходящий

ПРАВИЛА МНОЖЕСТВЕННОЙ КЛАССИФИКАЦИИ:
- Указывайте несколько классов, если товар:
  • Может использоваться в разных сферах
  • Имеет характеристики нескольких категорий
  • Является комплексным изделием
  • Может классифицироваться по-разному в зависимости от контекста
- Приоритет: лучше перестраховаться на первом этапе

ФОРМАТ ВЫВОДА:
Название товара|XX
Название товара|XX|YY
Название товара|XX|YY|ZZ

ОСНОВНЫЕ КЛАССЫ ОКПД2:
01 - Продукция и услуги сельского хозяйства и охоты
02 - Продукция лесоводства, лесозаготовок и связанные с этим услуги
03 - Рыба и прочая продукция рыболовства и рыбоводства
05 - Уголь
06 - Нефть и газ природный
07 - Руды металлические
08 - Продукция горнодобывающих производств прочая
09 - Услуги в области добычи полезных ископаемых
10 - Продукты пищевые
11 - Напитки
12 - Изделия табачные
13 - Текстиль и изделия текстильные
14 - Одежда
15 - Кожа и изделия из кожи
16 - Древесина и изделия из дерева и пробки, кроме мебели
17 - Бумага и изделия из бумаги
18 - Услуги печатные и услуги по копированию
19 - Кокс и нефтепродукты
20 - Вещества химические и продукты химические
21 - Средства лекарственные и материалы медицинские
22 - Изделия резиновые и пластмассовые
23 - Продукты минеральные неметаллические прочие
24 - Металлы основные
25 - Изделия металлические готовые, кроме машин и оборудования
26 - Оборудование компьютерное, электронное и оптическое
27 - Оборудование электрическое
28 - Машины и оборудование, не включенные в другие группировки
29 - Средства автотранспортные, прицепы и полуприцепы
30 - Средства транспортные и оборудование, прочие
31 - Мебель
32 - Изделия готовые прочие
33 - Услуги по ремонту и монтажу машин и оборудования
35 - Электроэнергия, газ, пар и кондиционирование воздуха
36 - Вода природная; услуги по очистке воды и водоснабжению
37 - Услуги по водоотведению
38 - Услуги по сбору, обработке и удалению отходов
41 - Здания и работы по возведению зданий
42 - Сооружения и строительные работы
43 - Работы строительные специализированные
45 - Услуги по торговле автотранспортными средствами
46 - Услуги по оптовой торговле
47 - Услуги по розничной торговле
49 - Услуги сухопутного и трубопроводного транспорта
50 - Услуги водного транспорта
51 - Услуги воздушного и космического транспорта
52 - Услуги по складированию и вспомогательные транспортные услуги
53 - Услуги почтовой связи и курьерские
55 - Услуги по предоставлению мест для временного проживания
56 - Услуги общественного питания
58 - Услуги издательские
59 - Услуги по производству кинофильмов
60 - Услуги в области теле- и радиовещания
61 - Услуги телекоммуникационные
62 - Продукты программные и услуги по разработке ПО
63 - Услуги в области информационных технологий
64 - Услуги финансовые
65 - Услуги по страхованию
68 - Услуги по операциям с недвижимым имуществом
69 - Услуги юридические и бухгалтерские
70 - Услуги головных офисов и консультативные
71 - Услуги в области архитектуры и инженерных изысканий
72 - Услуги научных исследований и разработок
73 - Услуги рекламные и исследования рынка
74 - Услуги профессиональные, научные и технические прочие
75 - Услуги ветеринарные
77 - Услуги по аренде и лизингу
78 - Услуги по трудоустройству и подбору персонала
79 - Услуги туристические
80 - Услуги по обеспечению безопасности
81 - Услуги по обслуживанию зданий и территорий
82 - Услуги административные и вспомогательные
84 - Услуги государственного управления
85 - Услуги в области образования
86 - Услуги в области здравоохранения
87 - Услуги по уходу с обеспечением проживания
88 - Услуги социальные без обеспечения проживания
90 - Услуги в области творчества и развлечений
91 - Услуги библиотек, архивов, музеев
92 - Услуги по организации азартных игр
93 - Услуги спортивные и развлекательные
94 - Услуги общественных организаций
95 - Услуги по ремонту компьютеров и бытовых товаров
96 - Услуги персональные прочие

СПИСОК ТОВАРОВ:
{products_text}"""

        return prompt

    @staticmethod
    def parse_classification_response(response: str, product_map: Dict[str, str]) -> Dict[str, List[str]]:
        """
        Парсинг ответа от AI

        Args:
            response: Ответ от AI
            product_map: Маппинг {название товара: id товара}

        Returns:
            Dict с результатами {product_id: [группы]}
        """
        results = {}

        for line in response.strip().split('\n'):
            if '|' not in line:
                continue

            parts = line.split('|')
            if len(parts) < 2:
                continue

            product_name = parts[0].strip()

            # Ищем товар в маппинге
            product_id = None
            for name, pid in product_map.items():
                if product_name.lower() in name.lower() or name.lower() in product_name.lower():
                    product_id = pid
                    break

            if product_id:
                # Извлекаем группы
                groups = []
                for group in parts[1:]:
                    group = group.strip()
                    # Проверяем, что это двузначное число
                    if re.match(r'^\d{2}$', group):
                        groups.append(group)

                if groups:
                    results[product_id] = groups

        return results
    