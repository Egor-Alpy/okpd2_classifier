#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –∏ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
"""
import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
import os

load_dotenv()


async def investigate_duplicates():
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏"""

    print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –î–£–ë–õ–ò–ö–ê–¢–ê–ú–ò")
    print("=" * 60)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Target MongoDB
    host = os.getenv("TARGET_MONGO_HOST", "localhost")
    port = os.getenv("TARGET_MONGO_PORT", "27017")
    database = os.getenv("TARGET_MONGODB_DATABASE", "okpd_classifier")

    client = AsyncIOMotorClient(f"mongodb://{host}:{port}")
    db = client[database]

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ
    print("\n1Ô∏è‚É£ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    collections = await db.list_collection_names()
    for collection in collections:
        count = await db[collection].count_documents({})
        print(f"   - {collection}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ products_stage_one
    print("\n2Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ products_stage_one:")
    products = db.products_stage_one

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total = await products.count_documents({})
    print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    indexes = await products.list_indexes().to_list(length=None)
    print("\n   –ò–Ω–¥–µ–∫—Å—ã:")
    for index in indexes:
        print(f"   - {index['name']}: {index['key']}")
        if 'unique' in index:
            print(f"     unique: {index['unique']}")

    # 3. –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
    print("\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    any_doc = await products.find_one()
    if any_doc:
        print(f"   –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {any_doc}")
    else:
        print("   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    print("\n4Ô∏è‚É£ –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º:")
    print("   Migration worker –ø—ã—Ç–∞–µ—Ç—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–ª—è–º–∏:")
    print("   - old_mongo_id (ID –∏–∑ source)")
    print("   - collection_name (–∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ source)")
    print(f"   - collection_name = '{os.getenv('SOURCE_COLLECTION_NAME')}'")

    # 5. –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ collection_name
    collection_name = os.getenv("SOURCE_COLLECTION_NAME", "products")
    docs_with_collection = await products.count_documents({"collection_name": collection_name})
    print(f"\n   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å collection_name='{collection_name}': {docs_with_collection}")

    # 6. –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print("\n5Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö:")
    for collection in collections:
        if collection != "products_stage_one":
            sample = await db[collection].find_one()
            if sample and 'title' in sample:
                print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection}':")
                print(f"      Title: {sample.get('title', 'N/A')}")
                print(f"      Fields: {list(sample.keys())}")

    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")

    if total == 0:
        print("\n1. –£–¥–∞–ª–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å:")
        print("   await products.drop_index('old_mongo_id_1_collection_name_1')")
        print("\n2. –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:")
        print("   await db.drop_collection('products_stage_one')")
        print("   await db.drop_collection('migration_jobs')")
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–∏ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ SOURCE_COLLECTION_NAME")
        print(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{os.getenv('SOURCE_COLLECTION_NAME')}'")

    client.close()


async def fix_database():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\n\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    answer = input("\n‚ùì –•–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ? (yes/no): ")

    if answer.lower() in ['yes', 'y']:
        host = os.getenv("TARGET_MONGO_HOST", "localhost")
        port = os.getenv("TARGET_MONGO_PORT", "27017")
        database = os.getenv("TARGET_MONGODB_DATABASE", "okpd_classifier")

        client = AsyncIOMotorClient(f"mongodb://{host}:{port}")
        db = client[database]

        print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        await db.drop_collection('products_stage_one')
        print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è products_stage_one")

        await db.drop_collection('migration_jobs')
        print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è migration_jobs")

        await db.drop_collection('classification_batches')
        print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è classification_batches")

        print("\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")
        print("\nüìù –¢–µ–ø–µ—Ä—å:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:")
        print("   docker-compose down")
        print("   docker-compose up -d")
        print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–∑—É:")
        print("   python scripts/init_db.py")
        print("\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é:")
        print("   python scripts/start_migration.py --api-key your-api-key --monitor")

        client.close()
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(investigate_duplicates())
    asyncio.run(fix_database())