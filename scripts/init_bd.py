#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""
import asyncio
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from redis.asyncio import Redis
import os
from dotenv import load_dotenv

load_dotenv()


async def check_source_mongo():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–π MongoDB"""
    url = os.getenv("SOURCE_MONGODB_URL", "mongodb://localhost:27017")
    db_name = os.getenv("SOURCE_MONGODB_DATABASE", "source_products")
    collection_name = os.getenv("SOURCE_COLLECTION_NAME", "products")

    try:
        client = AsyncIOMotorClient(url)
        db = client[db_name]
        count = await db[collection_name].count_documents({})
        print(f"‚úÖ Source MongoDB: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤")
        client.close()
        return True
    except Exception as e:
        print(f"‚ùå Source MongoDB: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False


async def init_target_mongo():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π MongoDB"""
    url = os.getenv("TARGET_MONGODB_URL", "mongodb://localhost:27018")
    db_name = os.getenv("TARGET_MONGODB_DATABASE", "okpd_classifier")

    try:
        client = AsyncIOMotorClient(url)
        db = client[db_name]

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è products_stage_one
        products = db.products_stage_one
        await products.create_index([("old_mongo_id", 1), ("collection_name", 1)], unique=True)
        await products.create_index("status_stg1")
        await products.create_index("created_at")
        await products.create_index("okpd_group")

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è migration_jobs
        migration_jobs = db.migration_jobs
        await migration_jobs.create_index("job_id", unique=True)

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è classification_batches
        batches = db.classification_batches
        await batches.create_index("batch_id", unique=True)

        print("‚úÖ Target MongoDB: –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        count = await products.count_documents({})
        print(f"   –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {count}")

        client.close()
        return True
    except Exception as e:
        print(f"‚ùå Target MongoDB: –û—à–∏–±–∫–∞ - {e}")
        return False


async def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    url = os.getenv("REDIS_URL", "redis://localhost:6379")

    try:
        redis = await Redis.from_url(url)
        await redis.ping()
        print("‚úÖ Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
        await redis.close()
        return True
    except Exception as e:
        print(f"‚ùå Redis: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False


async def check_anthropic():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ Anthropic"""
    api_key = os.getenv("ANTHROPIC_API_KEY")

    if api_key and len(api_key) > 10:
        print("‚úÖ Anthropic API key: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    else:
        print("‚ùå Anthropic API key: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
        return False


async def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OKPD2 Stage One Classifier\n")

    checks = [
        ("Source MongoDB", check_source_mongo()),
        ("Target MongoDB", init_target_mongo()),
        ("Redis", check_redis()),
        ("Anthropic API", check_anthropic())
    ]

    results = []
    for name, check in checks:
        result = await check
        results.append(result)

    print("\n" + "=" * 50)

    if all(results):
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π:")
        print("python scripts/start_migration.py --api-key $API_KEY --monitor")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())