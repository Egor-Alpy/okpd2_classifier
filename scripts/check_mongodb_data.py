#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""
import asyncio
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime
import os
from dotenv import load_dotenv
from urllib.parse import quote_plus

load_dotenv()


async def check_mongodb():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Target MongoDB"""
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host = os.getenv("TARGET_MONGO_HOST", "localhost")
    port = os.getenv("TARGET_MONGO_PORT", "27017")
    user = os.getenv("TARGET_MONGO_USER")
    password = os.getenv("TARGET_MONGO_PASS")
    authsource = os.getenv("TARGET_MONGO_AUTHSOURCE")
    authmechanism = os.getenv("TARGET_MONGO_AUTHMECHANISM", "SCRAM-SHA-256")
    database = os.getenv("TARGET_MONGODB_DATABASE", "okpd_classifier")

    # –§–æ—Ä–º–∏—Ä—É–µ–º connection string
    if user and password:
        connection_string = f"mongodb://{user}:{quote_plus(password)}@{host}:{port}"
        if authsource:
            connection_string += f"/{authsource}"
            connection_string += f"?authMechanism={authmechanism}"
        else:
            connection_string += f"/?authMechanism={authmechanism}"
    else:
        connection_string = f"mongodb://{host}:{port}"

    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB...")
    print(f"   Connection: {connection_string.replace(password or '', '***')}")
    print(f"   Database: {database}")
    print(f"   Host: {host}:{port}")
    print()

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        client = AsyncIOMotorClient(
            connection_string,
            serverSelectionTimeoutMS=5000,
            connectTimeoutMS=5000
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await client.admin.command('ping')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        all_dbs = await client.list_database_names()
        print(f"\nüìÇ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {', '.join(all_dbs)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à—É –±–∞–∑—É
        if database in all_dbs:
            db = client[database]
            collections = await db.list_collection_names()
            print(f"\nüìÑ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ '{database}':")
            for collection in collections:
                count = await db[collection].count_documents({})
                print(f"   - {collection}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ products_stage_one
            if "products_stage_one" in collections:
                products = db.products_stage_one

                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ products_stage_one:")

                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                total = await products.count_documents({})
                print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}")

                if total > 0:
                    # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    statuses = ["pending", "processing", "classified", "none_classified", "failed"]
                    print(f"\n   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
                    for status in statuses:
                        count = await products.count_documents({"status_stg1": status})
                        if count > 0:
                            print(f"   - {status}: {count}")

                    # –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
                    print(f"\n   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
                    cursor = products.find().limit(3)
                    async for product in cursor:
                        print(f"\n   ID: {product['_id']}")
                        print(f"   Title: {product.get('title', 'N/A')}")
                        print(f"   Status: {product.get('status_stg1', 'N/A')}")
                        print(f"   OKPD Groups: {product.get('okpd_group', 'N/A')}")
                        print(f"   Created: {product.get('created_at', 'N/A')}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º migration_jobs
                    if "migration_jobs" in collections:
                        jobs = db.migration_jobs
                        job_count = await jobs.count_documents({})
                        print(f"\n   Migration jobs: {job_count}")

                        if job_count > 0:
                            last_job = await jobs.find_one({}, sort=[("created_at", -1)])
                            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–≥—Ä–∞—Ü–∏—è:")
                            print(f"   - Job ID: {last_job.get('job_id')}")
                            print(f"   - Status: {last_job.get('status')}")
                            print(f"   - Total: {last_job.get('total_products')}")
                            print(f"   - Migrated: {last_job.get('migrated_products')}")
                else:
                    print("\n‚ö†Ô∏è  –í –±–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!")
                    print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("1. –ú–∏–≥—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å")
                    print("2. –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ source MongoDB")
                    print("3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ source MongoDB")

        else:
            print(f"\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{database}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã: {', '.join(all_dbs)}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        client.close()

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    return True


async def check_source_mongodb():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Source MongoDB"""
    print("\n" + "=" * 60)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Source MongoDB...")

    host = os.getenv("SOURCE_MONGO_HOST", "localhost")
    port = os.getenv("SOURCE_MONGO_PORT", "27017")
    user = os.getenv("SOURCE_MONGO_USER")
    password = os.getenv("SOURCE_MONGO_PASS")
    authsource = os.getenv("SOURCE_MONGO_AUTHSOURCE")
    authmechanism = os.getenv("SOURCE_MONGO_AUTHMECHANISM", "SCRAM-SHA-256")
    database = os.getenv("SOURCE_MONGODB_DATABASE")
    collection = os.getenv("SOURCE_COLLECTION_NAME")
    direct_connection = os.getenv("SOURCE_MONGO_DIRECT_CONNECTION", "false").lower() == "true"

    # –§–æ—Ä–º–∏—Ä—É–µ–º connection string
    if user and password:
        connection_string = f"mongodb://{user}:{quote_plus(password)}@{host}:{port}"
        if authsource:
            connection_string += f"/{authsource}"
            connection_string += f"?authMechanism={authmechanism}"
        else:
            connection_string += f"/?authMechanism={authmechanism}"
    else:
        connection_string = f"mongodb://{host}:{port}"

    print(f"   Connection: {connection_string.replace(password or '', '***')}")
    print(f"   Database: {database}")
    print(f"   Collection: {collection}")

    try:
        client = AsyncIOMotorClient(
            connection_string,
            directConnection=direct_connection,
            serverSelectionTimeoutMS=5000,
            connectTimeoutMS=5000
        )

        await client.admin.command('ping')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        if database and collection:
            db = client[database]
            count = await db[collection].count_documents({})
            print(f"   –¢–æ–≤–∞—Ä–æ–≤ –≤ source: {count}")

            if count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
                sample = await db[collection].find_one()
                if sample:
                    print("\n   –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
                    print(f"   - ID: {sample.get('_id')}")
                    print(f"   - Title: {sample.get('title', 'N/A')}")
                    print(f"   - Category: {sample.get('category', 'N/A')}")

        client.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Source MongoDB: {e}")


async def main():
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MongoDB –¥–ª—è OKPD2 Classifier\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Target MongoDB
    await check_mongodb()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Source MongoDB
    await check_source_mongodb()

    print("\n" + "=" * 60)
    print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤ MongoDB Compass:")
    print("1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫: mongodb://localhost:27017")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: okpd_classifier")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é: products_stage_one")
    print("\n–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç:")
    print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: docker-compose logs -f")
    print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: make migration-start API_KEY=your-key")


if __name__ == "__main__":
    asyncio.run(main())