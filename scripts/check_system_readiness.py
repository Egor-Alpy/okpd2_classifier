#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ
"""
import asyncio
import sys
import os
from motor.motor_asyncio import AsyncIOMotorClient
from redis.asyncio import Redis
from anthropic import AsyncAnthropic
from dotenv import load_dotenv
from urllib.parse import quote_plus
import aiohttp

load_dotenv()


class SystemReadinessChecker:
    def __init__(self):
        self.checks_passed = 0
        self.checks_failed = 0
        self.warnings = []

    async def check_source_mongodb(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Source MongoDB"""
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Source MongoDB...")

        try:
            from src.core.config import settings
            from src.storage.source_mongo import SourceMongoStore

            store = SourceMongoStore(
                settings.source_mongodb_database,
                settings.source_collection_name
            )

            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not await store.test_connection():
                self.checks_failed += 1
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            count = await store.count_total_products()
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count:,}")

            if count == 0:
                self.warnings.append("Source MongoDB –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
            products = await store.get_products_batch(limit=1)
            if products:
                product = products[0]
                print(f"   ‚úÖ –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product.get('title', 'N/A')[:50]}...")

            await store.close()
            self.checks_passed += 1
            return True

        except Exception as e:
            self.checks_failed += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

    async def check_target_mongodb(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Target MongoDB"""
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Target MongoDB...")

        try:
            from src.core.config import settings
            from src.storage.target_mongo import TargetMongoStore

            store = TargetMongoStore(settings.target_mongodb_database)

            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not await store.test_connection():
                self.checks_failed += 1
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤)
            await store.initialize()
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await store.get_statistics()
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"      –í—Å–µ–≥–æ: {stats['total']:,}")
            print(f"      –û–∂–∏–¥–∞–µ—Ç: {stats['pending']:,}")
            print(f"      –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {stats['classified']:,}")
            print(f"      –ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {stats['none_classified']:,}")
            print(f"      –û—à–∏–±–∫–∏: {stats['failed']:,}")
            print(f"      –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['processing']:,}")

            if stats['processing'] > 100:
                self.warnings.append(f"–ú–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞—Å—Ç—Ä—è–ª–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['processing']}")

            await store.close()
            self.checks_passed += 1
            return True

        except Exception as e:
            self.checks_failed += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

    async def check_redis(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis"""
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")

        try:
            from src.core.config import settings

            redis = await Redis.from_url(settings.redis_url)
            await redis.ping()
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
            keys = await redis.keys("*")
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")

            await redis.close()
            self.checks_passed += 1
            return True

        except Exception as e:
            self.checks_failed += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

    async def check_anthropic_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Anthropic API"""
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Anthropic API...")

        try:
            from src.core.config import settings

            if not settings.anthropic_api_key:
                self.checks_failed += 1
                print("   ‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False

            print(f"   üîë API Key: {settings.anthropic_api_key[:10]}...{settings.anthropic_api_key[-5:]}")
            print(f"   ü§ñ –ú–æ–¥–µ–ª—å: {settings.anthropic_model}")

            # –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ API
            from src.services.ai_client import AnthropicClient

            async with AnthropicClient(
                    settings.anthropic_api_key,
                    settings.anthropic_model
            ) as client:
                response = await client.classify_batch(
                    "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å 'OK' –µ—Å–ª–∏ –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    max_tokens=10
                )

                if "OK" in response or "ok" in response.lower():
                    print(f"   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç–≤–µ—Ç: {response.strip()}")
                    self.checks_passed += 1
                    return True
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
                    self.warnings.append("Anthropic API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    self.checks_passed += 1
                    return True

        except Exception as e:
            self.checks_failed += 1
            error_str = str(e)

            if "429" in error_str:
                print("   ‚ùå Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω")
                self.warnings.append("–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å rate limits")
            elif "403" in error_str:
                print("   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á)")
            elif "connection" in error_str.lower():
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏)")
                self.warnings.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Anthropic API")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_str[:100]}...")

            return False

    async def check_api_server(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")

        try:
            async with aiohttp.ClientSession() as session:
                # Health check
                async with session.get("http://localhost:8000/health") as resp:
                    if resp.status == 200:
                        print("   ‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        self.checks_passed += 1
                        return True
                    else:
                        print(f"   ‚ùå API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                        self.checks_failed += 1
                        return False

        except Exception as e:
            print("   ‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º)")
            self.warnings.append("API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True

    async def check_settings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        from src.core.config import settings

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {settings.migration_batch_size}")
        print(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {settings.classification_batch_size}")
        print(f"   ‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {settings.rate_limit_delay}—Å")
        print(f"   üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {settings.max_retries}")
        print(f"   üë∑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {settings.max_workers}")

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if settings.classification_batch_size > 20:
            self.warnings.append(
                f"–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ ({settings.classification_batch_size}) "
                "–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ rate limits"
            )

        if settings.rate_limit_delay < 5:
            self.warnings.append(
                f"–ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ({settings.rate_limit_delay}—Å) "
                "–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ rate limits"
            )

        if settings.max_workers > 3:
            self.warnings.append(
                f"–ú–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ ({settings.max_workers}) "
                "–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ rate limits"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
        if settings.proxy_url:
            print(f"   üåê –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {settings.proxy_url}")
        else:
            print("   üåê –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        self.checks_passed += 1
        return True

    async def run_all_checks(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîß –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ OKPD2 CLASSIFIER")
        print("=" * 60)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await self.check_source_mongodb()
        await self.check_target_mongodb()
        await self.check_redis()
        await self.check_anthropic_api()
        await self.check_api_server()
        await self.check_settings()

        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.checks_passed}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.checks_failed}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")

        if self.warnings:
            print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"   - {warning}")

        if self.checks_failed == 0:
            print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
            print("   1. docker-compose up -d")
            print("   2. make migration-start API_KEY=your-api-key")
            print("   3. make monitor API_KEY=your-api-key")
            return True
        else:
            print("\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
            print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return False


async def main():
    checker = SystemReadinessChecker()
    success = await checker.run_all_checks()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())
