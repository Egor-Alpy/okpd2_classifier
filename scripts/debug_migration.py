#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π
"""
import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient
from redis.asyncio import Redis
from dotenv import load_dotenv
from urllib.parse import quote_plus
from datetime import datetime

load_dotenv()


async def check_migration_status():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò OKPD2")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Target MongoDB
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Target MongoDB...")
    host = os.getenv("TARGET_MONGO_HOST", "localhost")
    port = os.getenv("TARGET_MONGO_PORT", "27017")
    database = os.getenv("TARGET_MONGODB_DATABASE", "okpd_classifier")

    try:
        client = AsyncIOMotorClient(f"mongodb://{host}:{port}", serverSelectionTimeoutMS=5000)
        await client.admin.command('ping')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Target MongoDB —É—Å–ø–µ—à–Ω–æ")

        db = client[database]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é products_stage_one
        products_count = await db.products_stage_one.count_documents({})
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ products_stage_one: {products_count}")

        if products_count == 0:
            print("‚ö†Ô∏è  –í –±–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!")
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            statuses = ["pending", "processing", "classified", "none_classified", "failed"]
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status in statuses:
                count = await db.products_stage_one.count_documents({"status_stg1": status})
                if count > 0:
                    print(f"   - {status}: {count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º migration_jobs
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏...")
        jobs_count = await db.migration_jobs.count_documents({})
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏: {jobs_count}")

        if jobs_count > 0:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞
            last_job = await db.migration_jobs.find_one({}, sort=[("created_at", -1)])
            if last_job:
                print(f"\n   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
                print(f"   - Job ID: {last_job.get('job_id')}")
                print(f"   - Status: {last_job.get('status')}")
                print(f"   - Total: {last_job.get('total_products')}")
                print(f"   - Migrated: {last_job.get('migrated_products')}")
                print(f"   - Created: {last_job.get('created_at')}")
                print(f"   - Updated: {last_job.get('updated_at')}")

                if last_job.get('status') == 'running':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞
                    if last_job.get('updated_at'):
                        time_since_update = (datetime.utcnow() - last_job['updated_at']).total_seconds()
                        if time_since_update > 60:
                            print(f"   ‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å {time_since_update:.0f} —Å–µ–∫—É–Ω–¥!")

        client.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Target MongoDB: {e}")
        return False

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Source MongoDB
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Source MongoDB...")
    source_host = os.getenv("SOURCE_MONGO_HOST")
    source_port = os.getenv("SOURCE_MONGO_PORT", "27017")
    source_user = os.getenv("SOURCE_MONGO_USER")
    source_pass = os.getenv("SOURCE_MONGO_PASS")
    source_authsource = os.getenv("SOURCE_MONGO_AUTHSOURCE")
    source_database = os.getenv("SOURCE_MONGODB_DATABASE")
    source_collection = os.getenv("SOURCE_COLLECTION_NAME")

    if source_user and source_pass:
        connection_string = f"mongodb://{source_user}:{quote_plus(source_pass)}@{source_host}:{source_port}"
        if source_authsource:
            connection_string += f"/{source_authsource}?authMechanism=SCRAM-SHA-256"
    else:
        connection_string = f"mongodb://{source_host}:{source_port}"

    print(f"   Host: {source_host}:{source_port}")
    print(f"   Database: {source_database}")
    print(f"   Collection: {source_collection}")

    try:
        source_client = AsyncIOMotorClient(
            connection_string,
            directConnection=os.getenv("SOURCE_MONGO_DIRECT_CONNECTION", "false").lower() == "true",
            serverSelectionTimeoutMS=5000
        )
        await source_client.admin.command('ping')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Source MongoDB —É—Å–ø–µ—à–Ω–æ")

        if source_database and source_collection:
            source_db = source_client[source_database]
            source_count = await source_db[source_collection].count_documents({})
            print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ source: {source_count}")

            # –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
            sample = await source_db[source_collection].find_one()
            if sample:
                print("\n   –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ source:")
                print(f"   - ID: {sample.get('_id')}")
                print(f"   - Title: {sample.get('title', 'N/A')[:50]}...")

        source_client.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Source MongoDB: {e}")
        print("   –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ source –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!")
        return False

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    redis_url = os.getenv("REDIS_URL", "redis://localhost:6379")

    try:
        redis = await Redis.from_url(redis_url)
        await redis.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
        keys = await redis.keys("*")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π –≤ Redis: {len(keys)}")

        if keys:
            print("   –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π:")
            for key in keys[:5]:
                print(f"   - {key.decode('utf-8')}")

        await redis.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Docker
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    import subprocess

    try:
        result = subprocess.run(
            ["docker", "ps", "--format", "table {{.Names}}\t{{.Status}}\t{{.State}}"],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    except:
        print("‚ö†Ô∏è  Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if products_count == 0 and jobs_count == 0:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. Migration worker –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("2. –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Source MongoDB")
        print("3. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ API")
        print("\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs migration-worker")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—é:")
        print("   python scripts/start_migration.py --api-key YOUR_KEY")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Source MongoDB –≤ .env")

    elif products_count == 0 and jobs_count > 0:
        print("\n‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è!")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Source MongoDB")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SOURCE_COLLECTION_NAME")
        print("3. Migration worker –∑–∞–≤–∏—Å –∏–ª–∏ —É–ø–∞–ª")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ migration-worker –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

    elif products_count > 0:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è!")
        if products_count < 100:
            print("   –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        print(f"\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {products_count} —Ç–æ–≤–∞—Ä–æ–≤")
        print("\n–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python scripts/monitor_progress.py --api-key YOUR_KEY")

    return True


async def check_logs_hint():
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤"""
    print("\nüìã –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –õ–û–ì–û–í:")
    print("\n# –í—Å–µ –ª–æ–≥–∏:")
    print("docker-compose logs -f")
    print("\n# –¢–æ–ª—å–∫–æ migration-worker:")
    print("docker-compose logs -f migration-worker")
    print("\n# –¢–æ–ª—å–∫–æ API:")
    print("docker-compose logs -f api")
    print("\n# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫:")
    print("docker-compose logs --tail=100 migration-worker")


if __name__ == "__main__":
    asyncio.run(check_migration_status())
    asyncio.run(check_logs_hint())